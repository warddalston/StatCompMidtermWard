Coefficients[YES[,z],z] <<- mod[[1]]
R.squareds[z] <<- summary(mod)[["r.squared"]]
})
R.squareds
View(Coefficients)
selectorList <- sapply(1:ncol(X),function(x){
apply(combn(1:ncol(X),x), 2, function(z){
CurrentCombn <- logical(length=5)
CurrentCombn[z] <- TRUE
return(CurrentCombn)
}) #close the apply
}) #close the sapply
selectorMatrix <- matrix(unlist(selectorList),nrow=ncol(X))
Coefficients <- matrix(nrow=ncol(X),ncol=2^ncol(X)-1)
R.squareds <- vector(length=2^ncol(X)-1)
colnames(Coefficients) <- names(R.squareds) <- apply(selectorMatrix,2,function(x){ paste("Vars:",paste(which(x==TRUE),collapse=","))})
rownames(Coefficients) <- paste("Variable", 1:5, sep=" ")
a_ply(.data=1:ncol(selectorMatrix),.margins=1,.fun=function(z){
mod <- lm(y~X[,selectorMatrix[,z]]-1)
Coefficients[selectorMatrix[,z],z] <<- mod[[1]]
R.squareds[z] <<- summary(mod)[["r.squared"]]
})
setMethod(f="fitRegAnalysis",
definition=function(X, y, ...){
#The method first creates a logical matrix specifying which variables are in each of the combinations.  There are (2^n)-1 possible combinations of covariates (including the intercept as a covariate).  The reason for the -1 is that it is not possible to fit a model with no intercepts and no covariates!
selectorList <- sapply(1:ncol(X),function(x){
apply(combn(1:ncol(X),x), 2, function(z){
CurrentCombn <- logical(length=5)
CurrentCombn[z] <- TRUE
return(CurrentCombn)
}) #close the apply
}) #close the sapply
selectorMatrix <- matrix(unlist(selectorList),nrow=ncol(X)) #turn the list output in a matrix.
#The next section creates the objects that will be in the output.  They have informative names and are sized based on parameter inputs.
Coefficients <- matrix(nrow=ncol(X),ncol=2^ncol(X)-1)
R.squareds <- vector(length=2^ncol(X)-1)
colnames(Coefficients) <- names(R.squareds) <- apply(selectorMatrix,2,function(x){ paste("Vars:",paste(which(x==TRUE),collapse=","))})
rownames(Coefficients) <- paste("Variable", 1:5, sep=" ")
#The final section of this function does the actual regression fitting.  Using a_ply it fits a regression for each column of the selectorMatrix where the covariates are the based on the "TRUE" values for a given column.  Then, it writes the coefficent values and R^2 value to the appropriate element of the output objects using "<<-" to force writing these to the first variable matching the specified name in a parent environment.  This is basically R-cheating.
a_ply(.data=1:ncol(selectorMatrix),.margins=1,.fun=function(z){
mod <- lm(y~X[,selectorMatrix[,z]]-1)
Coefficients[selectorMatrix[,z],z] <<- mod[[1]]
R.squareds[z] <<- summary(mod)[["r.squared"]]
})
#it returns the output generated above as the input of the slots of an S4 object of "RegAnalysis" class
return(new("RegAnalysis", coefficients=Coefficients,R2=R.squareds,X=X,y=y)
}
)
setMethod(f="fitRegAnalysis",
definition=function(X, y, ...){
#The method first creates a logical matrix specifying which variables are in each of the combinations.  There are (2^n)-1 possible combinations of covariates (including the intercept as a covariate).  The reason for the -1 is that it is not possible to fit a model with no intercepts and no covariates!
selectorList <- sapply(1:ncol(X),function(x){
apply(combn(1:ncol(X),x), 2, function(z){
CurrentCombn <- logical(length=5)
CurrentCombn[z] <- TRUE
return(CurrentCombn)
}) #close the apply
}) #close the sapply
selectorMatrix <- matrix(unlist(selectorList),nrow=ncol(X)) #turn the list output in a matrix.
#The next section creates the objects that will be in the output.  They have informative names and are sized based on parameter inputs.
Coefficients <- matrix(nrow=ncol(X),ncol=2^ncol(X)-1)
R.squareds <- vector(length=2^ncol(X)-1)
colnames(Coefficients) <- names(R.squareds) <- apply(selectorMatrix,2,function(x){ paste("Vars:",paste(which(x==TRUE),collapse=","))})
rownames(Coefficients) <- paste("Variable", 1:5, sep=" ")
#The final section of this function does the actual regression fitting.  Using a_ply it fits a regression for each column of the selectorMatrix where the covariates are the based on the "TRUE" values for a given column.  Then, it writes the coefficent values and R^2 value to the appropriate element of the output objects using "<<-" to force writing these to the first variable matching the specified name in a parent environment.  This is basically R-cheating.
a_ply(.data=1:ncol(selectorMatrix),.margins=1,.fun=function(z){
mod <- lm(y~X[,selectorMatrix[,z]]-1)
Coefficients[selectorMatrix[,z],z] <<- mod[[1]]
R.squareds[z] <<- summary(mod)[["r.squared"]]
})
#it returns the output generated above as the input of the slots of an S4 object of "RegAnalysis" class
return(new("RegAnalysis", coefficients=Coefficients,R2=R.squareds,X=X,y=y))
}
)
setGeneric(name="fitRegAnalysis",
def=function(x, y, ...)
{standardGeneric("fitRegAnalysis")}
)
setMethod(f="fitRegAnalysis",
definition=function(X, y, ...){
#The method first creates a logical matrix specifying which variables are in each of the combinations.  There are (2^n)-1 possible combinations of covariates (including the intercept as a covariate).  The reason for the -1 is that it is not possible to fit a model with no intercepts and no covariates!
selectorList <- sapply(1:ncol(X),function(x){
apply(combn(1:ncol(X),x), 2, function(z){
CurrentCombn <- logical(length=5)
CurrentCombn[z] <- TRUE
return(CurrentCombn)
}) #close the apply
}) #close the sapply
selectorMatrix <- matrix(unlist(selectorList),nrow=ncol(X)) #turn the list output in a matrix.
#The next section creates the objects that will be in the output.  They have informative names and are sized based on parameter inputs.
Coefficients <- matrix(nrow=ncol(X),ncol=2^ncol(X)-1)
R.squareds <- vector(length=2^ncol(X)-1)
colnames(Coefficients) <- names(R.squareds) <- apply(selectorMatrix,2,function(x){ paste("Vars:",paste(which(x==TRUE),collapse=","))})
rownames(Coefficients) <- paste("Variable", 1:5, sep=" ")
#The final section of this function does the actual regression fitting.  Using a_ply it fits a regression for each column of the selectorMatrix where the covariates are the based on the "TRUE" values for a given column.  Then, it writes the coefficent values and R^2 value to the appropriate element of the output objects using "<<-" to force writing these to the first variable matching the specified name in a parent environment.  This is basically R-cheating.
a_ply(.data=1:ncol(selectorMatrix),.margins=1,.fun=function(z){
mod <- lm(y~X[,selectorMatrix[,z]]-1)
Coefficients[selectorMatrix[,z],z] <<- mod[[1]]
R.squareds[z] <<- summary(mod)[["r.squared"]]
})
#it returns the output generated above as the input of the slots of an S4 object of "RegAnalysis" class
return(new("RegAnalysis", coefficients=Coefficients,R2=R.squareds,X=X,y=y))
}
)
setClass(Class="RegAnalysis",
representation = representation(
coefficients = "matrix",
R2 = "numeric",
X = "matrix",
y = "numeric"
),
prototype = prototype(
coefficients = matrix(),
R2 = numeric(),
X = matrix(),
y = numeric()
)
)
setMethod("initialize", "RegAnalysis",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
setGeneric("getRegAnalysis",
function(object="RegAnalysis")  {
standardGeneric("getRegAnalysis")
}
)
setMethod("getRegAnalysis", "RegAnalysis",
function(object){
return(list(coefficients=object@coefficients,R2=object@R2))
}
)
fitRegAnalysis(X=X,y=y)
yum <- fitRegAnalysis(X=X,y=y)
yum <- fitRegAnalysis(X=X,y=y)
fitRegAnalysis(X=X,y=y)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
getRegAnalysis(yum)
getRegAnalysis(X,y)
getRegAnalysis(X)
yum
set.seed(1801)
myX <- matrix(rpois(n=60,lambda=15),ncol=4)
myX <- cbind(1,myX)
myY <- sample(1:100,15,replace=TRUE)
fitRegAnalysis(myX, myY)
View(X)
View(myX)
fitRegAnalysis(myX, myY)
source('~/.active-rstudio-document', echo=TRUE)
myX <- matrix(rpois(n=60,lambda=15),ncol=4)
myX <- cbind(1,myX)
myY <- sample(1:100,15,replace=TRUE)
fitRegAnalysis(myX, myY)
source('~/.active-rstudio-document', echo=TRUE)
new("RegAnalysis",X=myX,y=myY)
myX2 <- cbind(NA,myX[,2:5])
new("RegAnalysis",X=myX2,y=myY)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
apply(selectorMatrix,2,function(x){ paste("Vars:",paste(which(x==TRUE),collapse=","))})
apply(selectorMatrix,2,function(x){ paste("Vars:",paste(which(x==TRUE-1),collapse=","))})
apply(selectorMatrix,2,function(x){ paste("Vars:",paste(which(x==TRUE)-1,collapse=","))})
apply(selectorMatrix,2,function(x){
gsub("0","Int",paste("Vars:",paste(which(x==TRUE)-1,collapse=",")))
})
c("Int",paste("Variable", 1:(ncol(X)-1), sep=" ")
)
source('~/.active-rstudio-document', echo=TRUE)
showMethods(classes="RegAnalysis")
#' \item \code{X} The first input, a matrix of covariate values (intercept vector not included)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
getMethod("fitRegAnalysis")
setGeneric("getRegAnalysis",
function(object)  {
standardGeneric("getRegAnalysis")
}
)
setClass(Class="RegAnalysis",
slots = list(
coefficients = "matrix",
R2 = "numeric",
X = "matrix",
y = "numeric"
),
prototype = prototype(
coefficients = matrix(),
R2 = numeric(),
X = matrix(),
y = numeric()
)
)
#' @export
setMethod("initialize", "RegAnalysis",
function(.Object, coefficients=matrix(0,nrow=1,ncol=1), R2=numeric(0),X=matrix(0,nrow=1,ncol=1),y=numeric(0)){
if(any(is.na(X))){
stop("The function does not accept covariate matrices with missing values")
}
if(any(is.na(y))){
stop("The function does not accept outcome vectors with missing values")
}
if(length(y)!=nrow(X)){
stop("The length of y and the number of rows of X must be equal")
}
.Object@coefficients <- coefficients
.Object@R2 <- R2
.Object@X <- X
.Object@y <- y
.Object
}
)
setGeneric("getRegAnalysis",
function(object)  {
standardGeneric("getRegAnalysis")
}
)
setMethod(f="getRegAnalysis", signature="RegAnalysis",
definition=function(object){
return(list(coefficients=object@coefficients,R2=object@R2))
}
)
toy <- new("RegAnalysis")
numeric(0)
setMethod("initialize", "RegAnalysis",
function(.Object, coefficients=matrix(0,nrow=1,ncol=1), R2=numeric(0),X=matrix(0,nrow=1,ncol=1),y=numeric(1)){
if(any(is.na(X))){
stop("The function does not accept covariate matrices with missing values")
}
if(any(is.na(y))){
stop("The function does not accept outcome vectors with missing values")
}
if(length(y)!=nrow(X)){
stop("The length of y and the number of rows of X must be equal")
}
.Object@coefficients <- coefficients
.Object@R2 <- R2
.Object@X <- X
.Object@y <- y
.Object
}
)
#' @rdname RegAnalysis
#' @export
setGeneric("getRegAnalysis",
function(object)  {
standardGeneric("getRegAnalysis")
}
)
#' @export
setMethod(f="getRegAnalysis", signature="RegAnalysis",
definition=function(object){
return(list(coefficients=object@coefficients,R2=object@R2))
}
)
toy <- new("RegAnalysis")
toy
numeric(1)
getRegAnalysis(toy)
showMethods(class="RegAnalysis")
showMethods("plot")
plot
fitRegAnalysis
source('~/.active-rstudio-document', echo=TRUE)
fitRegAnalysis
showMethods(fitRegAnalysis)
showMethods("fitRegAnalysis")
showMethods(fitRegAnalysis(X,y))
showMethods(fitRegAnalysis)
getMethods(fitRegAnalysis)
findMethods(fitRegAnalysis)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
showMethods(fitRegAnalysis)
getMethods(fitRegAnalysis)
source('~/Documents/WashU 2nd Year/Applied Stats Programming/March 6/RPackageProblemSet/RegCombin.R', echo=TRUE)
source('~/Documents/WashU 2nd Year/Applied Stats Programming/March 6/RPackageProblemSet/fitRegCombin.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setClass(Class="RegAnalysis",
contains="RegCombin",
slots = list(
MeanR2 = "numeric".
source('~/.active-rstudio-document', echo=TRUE)
setClass(Class="RegAnalysis",
contains="RegCombin",
slots = list(
MeanR2 = "numeric",
coefficients = "matrix",
R2 = "numeric",
X = "matrix",
y = "numeric"
),
prototype = prototype(
MeanR2 = numeric(),
coefficients = matrix(),
R2 = numeric(),
X = matrix(),
y = numeric()
)
)
setMethod("initialize", "RegAnalysis",
function(.Object, MeanR2=numeric(0), coefficients=matrix(0,nrow=1,ncol=1), R2=numeric(0),X=matrix(0,nrow=1,ncol=1),y=numeric(1)){
if(any(is.na(X))){
stop("The function does not accept covariate matrices with missing values")
}
if(any(is.na(y))){
stop("The function does not accept outcome vectors with missing values")
}
if(length(y)!=nrow(X)){
stop("The length of y and the number of rows of X must be equal")
}
.Object@MeanR2 <- MeanR2
.Object@coefficients <- coefficients
.Object@R2 <- R2
.Object@X <- X
.Object@y <- y
.Object
}
)
setGeneric("getRegAnalysis",
function(object)  {
standardGeneric("getRegAnalysis")
}
)
setMethod(f="getRegAnalysis", #f is some generic method that R knows (it knows getRegAnalysis because we just taught it to R in the function right about here!!!!! )
signature="RegAnalysis", #now we teach R what to do when it sees getRegAnalysis and the input is of class RegAnalysis!
definition=function(object){
return(object@MeanR2))
}
setMethod(f="getRegAnalysis", #f is some generic method that R knows (it knows getRegAnalysis because we just taught it to R in the function right about here!!!!! )
signature="RegAnalysis", #now we teach R what to do when it sees getRegAnalysis and the input is of class RegAnalysis!
definition=function(object){
return(object@MeanR2)
}
)
toy <- new("RegAnalysis")
toy
getRegCombin(toy)
class(toy)
getRegAnalysis(toy)
setMethod(f="getRegCombin",
signature="RegAnalysis",
definition=function(object){
return(list(MeanR2=object@MeanR2,coefficients=object@coefficients,R2=object@coefficients))
}
)
getRegCombin(toy)
#' @export
setMethod(f="getRegAnalysis", #f is some generic method that R knows (it knows getRegAnalysis because we just taught it to R in the function right about here!!!!! )
signature="RegAnalysis", #now we teach R what to do when it sees getRegAnalysis and the input is of class RegAnalysis!
definition=function(object){
return(list(MeanR2=object@MeanR2))
}
)
getRegAnalysis(toy)
set.seed(1801)
myX <- matrix(rpois(n=60,lambda=15),ncol=4)
myY <- sample(1:100,15,replace=TRUE)
toy <- fitRegCombin(myX, myY)
toy
class(toy)
apply(toy@coefficients,1,function(x) which(!is.na(x)) )
apply(toy@coefficients,1,function(x) mean(object@R2[which(!is.na(x))] ) )
apply(toy@coefficients,1,function(x) mean(toy@R2[which(!is.na(x))] ) )
MeanR2 <- apply(toy@coefficients,1,function(x) mean(toy@R2[which(!is.na(x))] ) )
MeanR2
setGeneric(name="performRegAnalysis",
def=function(object)
{standardGeneric("performRegAnalysis")}
)
#' @export
setMethod(f="performRegAnalysis",
signature="RegCombin",
definition=function(object){
MeanR2 <- apply(object@coefficients,1,function(x) mean(object@R2[which(!is.na(x))] ) )
return(new("RegAnlysis",MeanR2=MeanR2,coefficients=object@coefficients,R2=object@R2,X=object@X,y=object@y))
} # close definition
) #close set method
performRegAnalysis(toy)
setClass(Class="RegAnalysis",
contains="RegCombin",
slots = list(
MeanR2 = "numeric",
coefficients = "matrix",
R2 = "numeric",
X = "matrix",
y = "numeric"
),
prototype = prototype(
MeanR2 = numeric(),
coefficients = matrix(),
R2 = numeric(),
X = matrix(),
y = numeric()
)
)
#' @export
setMethod("initialize", "RegAnalysis",
function(.Object, MeanR2=numeric(0), coefficients=matrix(0,nrow=1,ncol=1), R2=numeric(0),X=matrix(0,nrow=1,ncol=1),y=numeric(1)){
if(any(is.na(X))){
stop("The function does not accept covariate matrices with missing values")
}
if(any(is.na(y))){
stop("The function does not accept outcome vectors with missing values")
}
if(length(y)!=nrow(X)){
stop("The length of y and the number of rows of X must be equal")
}
.Object@MeanR2 <- MeanR2
.Object@coefficients <- coefficients
.Object@R2 <- R2
.Object@X <- X
.Object@y <- y
.Object
}
)
#' @rdname RegAnalysis
#' @export
setGeneric("getRegAnalysis",
function(object)  {
standardGeneric("getRegAnalysis")
}
)
#' @export
setMethod(f="getRegAnalysis", #f is some generic method that R knows (it knows getRegAnalysis because we just taught it to R in the function right about here!!!!! )
signature="RegAnalysis", #now we teach R what to do when it sees getRegAnalysis and the input is of class RegAnalysis!
definition=function(object){
return(list(MeanR2=object@MeanR2))
}
)
#' @export
setMethod(f="getRegCombin",
signature="RegAnalysis",
definition=function(object){
return(list(MeanR2=object@MeanR2,coefficients=object@coefficients,R2=object@coefficients))
}
)
performRegAnalysis(toy)
setMethod(f="performRegAnalysis",
signature="RegCombin",
definition=function(object){
MeanR2 <- apply(object@coefficients,1,function(x) mean(object@R2[which(!is.na(x))] ) )
return(new("RegAnalysis",MeanR2=MeanR2,coefficients=object@coefficients,R2=object@R2,X=object@X,y=object@y))
} # close definition
) #close set method
performRegAnalysis(toy)
toy <- performRegAnalysis(toy)
myX <- matrix(rpois(n=60,lambda=15),ncol=3)
myY <- sample(1:100,20,replace=TRUE)
myRegCombin <- fitRegCombin(myX, myY)
source('~/.active-rstudio-document', echo=TRUE)
myRegCombin <- fitRegCombin(myX, myY)
myRegCombin
performRegAnalysis(myRegCombin)
myX <- matrix(rpois(n=120,lambda=15),ncol=6)
myY <- sample(1:100,20,replace=TRUE)
myRegCombin <- fitRegCombin(myX, myY)
performRegAnalysis(myRegCombin)
myX <- matrix(rpois(n=240,lambda=15),ncol=6)
myX <- matrix(rpois(n=240,lambda=15),ncol=12)
myY <- sample(1:100,20,replace=TRUE)
myRegCombin <- fitRegCombin(myX, myY)
performRegAnalysis(myRegCombin)
yo <- performRegAnalysis(myRegCombin)
getRegAnalysis(yo)
showMethods("print")
showMethods("show")
getMethods("numeric")
"numeric"
getMethod("numeric")
getMethod("print")
existsMethod("print")
existsMethod("print")
showMethod("print")
showMethods("print")
setMethod(f="print",signature="RegCombin",definition=function(object){
object@R2
})
showMethods("print")
setMethod(f="print",signature="RegCombin",definition=function(object){
object@R2
})
getMethods("print")
setMethod(f="print",signature="RegCombin",definition=function(x,...){
object@R2
})
remove.packages("RegCombinPack")
remove.packages("RegCombinPack")
remove.packages("RegCombinPack")
library("RegCombinPack", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
showMethods(show)
showMethods(print)
showMethods(plot)
showMethods(get)
showMethods(initialize)
remove.packages("BMAPack")
current.code <- as.package("BMAPack")
load_all(current.code)
document(current.code)
install(pkg=current.code, local=TRUE)
library(devtools)
library(roxygen2)
setwd("/Users/clockbob1/Documents/WashU 2nd Year/Applied Stats Programming/StatCompMidtermWard") #This will need to be changed to match your directory
current.code <- as.package("BMAPack")
load_all(current.code)
document(current.code)
install(pkg=current.code, local=TRUE)
